<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dassa.mapper.MovePackageMapper">

	<resultMap type="com.dassa.vo.PackageTempVO" id="packageMap">
		<result column="PACKAGE_IDX" property="packageIdx"/>
		<result column="PACKAGE_TYPE" property="packageType"/>
		<result column="PACKAGE_NAME" property="packageName"/>
		<result column="PACKAGE_IMG_NAME" property="packageImgName"/>
		<result column="PACKAGE_IMG_PATH" property="packageImgPath"/>
		<result column="PACKAGE_STATUS" property="packageStatus"/>
		<result column="PACKAGE_REG_DATE" property="packageRegDate"/>
		<result column="PACKAGE_DELETE_DATE" property="packageDeleteDate"/>
		<result column="PACKAGE_OPTION1_NAME" property="packageOption1Name"/>
		<result column="PACKAGE_OPTION1_VALUE" property="packageOption1Value"/>
		<result column="PACKAGE_OPTION1_ETC" property="packageOption1Etc"/>
		<result column="PACKAGE_OPTION2_NAME" property="packageOption2Name"/>
		<result column="PACKAGE_OPTION2_VALUE" property="packageOption2Value"/>
		<result column="PACKAGE_OPTION2_ETC" property="packageOption2Etc"/>
		<result column="PACKAGE_OPTION3_NAME" property="packageOption3Name"/>
		<result column="PACKAGE_OPTION3_VALUE" property="packageOption3Value"/>
		<result column="PACKAGE_OPTION3_ETC" property="packageOption3Etc"/>
		<result column="PACKAGE_OPTION4_NAME" property="packageOption4Name"/>
		<result column="PACKAGE_OPTION4_VALUE" property="packageOption4Value"/>
		<result column="PACKAGE_OPTION4_ETC" property="packageOption4Etc"/>
		<result column="PACKAGE_OPTION5_NAME" property="packageOption5Name"/>
		<result column="PACKAGE_OPTION5_VALUE" property="packageOption5Value"/>
		<result column="PACKAGE_OPTION5_ETC" property="packageOption5Etc"/>
	</resultMap>




	<insert id="regPackage" parameterType="com.dassa.vo.PackageRegVO">
		insert
		into MOVE_PACKAGE_TBL values (
		MOVE_PACKAGE_SEQ.nextval,
		#{packageType},
		#{packageName},
		<choose>
			<when test="#{packageImgName != null}">
				#{packageImgName},
				#{packageImgPath},
			</when>
			<otherwise>
				null,
				null,
			</otherwise>
		</choose>

		<foreach collection="packageOptionList" item="element">
			<choose>
				<when test="element.packageOptionValue == ''">
					null,
					null,
					null,
				</when>
				<otherwise>
					#{element.packageOptionName},
					#{element.packageOptionValue},
					#{element.packageOptionEtc},
				</otherwise>
			</choose>
		</foreach>
		default,
		sysdate,
		null
		)
	</insert>

	<select id="packageListCnt" parameterType="com.dassa.vo.PackageSearchFilterVO" resultType="int">
		select count(*) from MOVE_PACKAGE_TBL
		where PACKAGE_TYPE != 3
		<if test='!packageName.equals("")'>
			and PACKAGE_NAME LIKE '%'||#{packageName}||'%'
		</if>
		<if test="packageType != null">
			and PACKAGE_TYPE in
			    <foreach collection="packageType" item="item" index="index" separator="," open="(" close=")">
					#{item}
				</foreach>
		</if>
		<if test='!minDate.equals("")'>
			and PACKAGE_REG_DATE <![CDATA[>]]> To_date(#{minDate}, 'yyyy-mm-dd')
		</if>
		<if test='!maxDate.equals("")'>
			and PACKAGE_REG_DATE <![CDATA[<]]> To_date(#{maxDate}, 'yyyy-mm-dd')
		</if>

	</select>


	<update id="modifyPackage" parameterType="com.dassa.vo.PackageRegVO">
		update MOVE_PACKAGE_TBL set
			PACKAGE_TYPE	=	#{packageType},
		    <if test="packageImgName != null">
				PACKAGE_IMG_NAME	=	#{packageImgName},
				PACKAGE_IMG_PATH	=	#{packageImgPath},
			</if>

			<if test="packageOptionList[0].packageOptionValue != ''">
				PACKAGE_OPTION1_NAME		=	#{packageOptionList[0].packageOptionName},
				PACKAGE_OPTION1_VALUE		=	#{packageOptionList[0].packageOptionValue},
				PACKAGE_OPTION1_ETC			=	#{packageOptionList[0].packageOptionEtc},
			</if>
			<if test="packageOptionList[1].packageOptionValue != ''">
				PACKAGE_OPTION2_NAME		=	#{packageOptionList[1].packageOptionName},
				PACKAGE_OPTION2_VALUE		=	#{packageOptionList[1].packageOptionValue},
				PACKAGE_OPTION2_ETC			=	#{packageOptionList[1].packageOptionEtc},
			</if>
			<if test="packageOptionList[2].packageOptionValue != ''">
				PACKAGE_OPTION3_NAME		=	#{packageOptionList[2].packageOptionName},
				PACKAGE_OPTION3_VALUE		=	#{packageOptionList[2].packageOptionValue},
				PACKAGE_OPTION3_ETC			=	#{packageOptionList[2].packageOptionEtc},
			</if>
			<if test="packageOptionList[3].packageOptionValue != ''">
				PACKAGE_OPTION4_NAME		=	#{packageOptionList[3].packageOptionName},
				PACKAGE_OPTION4_VALUE		=	#{packageOptionList[3].packageOptionValue},
				PACKAGE_OPTION4_ETC			=	#{packageOptionList[3].packageOptionEtc},
			</if>
			<if test="packageOptionList[4].packageOptionValue != ''">
				PACKAGE_OPTION5_NAME		=	#{packageOptionList[4].packageOptionName},
				PACKAGE_OPTION5_VALUE		=	#{packageOptionList[4].packageOptionValue},
				PACKAGE_OPTION5_ETC			=	#{packageOptionList[4].packageOptionEtc},
			</if>
			PACKAGE_NAME		=	#{packageName}
			where PACKAGE_IDX	=	#{packageIdx}
	</update>


	<select id="getPackageList" resultMap="packageMap">
		select *
		from MOVE_PACKAGE_TBL
		where PACKAGE_STATUS = 0
		order by PACKAGE_IDX
	</select>

	<select id="getPackage" resultMap="packageMap" parameterType="int">
		select *
		from MOVE_PACKAGE_TBL
		where PACKAGE_STATUS = 0
		  and PACKAGE_IDX = #{idx}
	</select>




	<insert id="regApply" parameterType="com.dassa.vo.MoveApplyVO">

		insert into MOVE_APPLY_TBL(APPLY_IDX, -- 고유번호
								   GUEST_IDX, -- 유저IDX
								   GUEST_NAME, --
								   GUEST_PHONE,
								   START_ADDR1, -- 시작위치(도로명)
								   START_ADDR2, -- 시작위치(지명)
								   START_ADDR3, -- 상세주소
								   START_LATITUDE,
								   START_LONGITUDE,
								   START_TYPE,
								   START_STRUCTURE,
								   START_SIZE,
								   START_FLOOR,
								   START_ELEVATOR,
								   START_PARKING,
								   END_ADDR1,
								   END_ADDR2,
								   END_ADDR3,
								   END_LATITUDE,
								   END_LONGITUDE,
								   END_TYPE,
								   END_FLOOR,
								   END_ELEVATOR,
								   END_PARKING,
								   APPLY_DATE, -- 이사일
								   APPLY_TIME, -- 이사시간
								   APPLY_HOPE,
								   APPLY_HELP,
								   APPLY_MEMO,
								   APPLY_STATUS,
								   APPLY_REG_DATE)
		values (MOVE_APPLY_SEQ.nextval,
				#{guestIdx},
				#{guestName},
				#{guestPhone},
				#{startAddr1},
				#{startAddr2},
				#{startAddr3},
				#{startLatitude},
				#{startLongitude},
				#{startType},
				#{startStructure},
				#{startSize},
				#{startFloor},
				#{startElevator},
				#{startParking},
				#{endAddr1},
				#{endAddr2},
				#{endAddr3},
				#{endLatitude},
				#{endLongitude},
				#{endType},
				#{endFloor},
				#{endElevator},
				#{endParking},
				#{applyDate},
				#{applyTime},
				#{applyHope},
				#{applyHelp},
				#{applyMemo},
				0,
				SYSDATE)
	</insert>


	<!-- 재고 등록 -->
	<insert id="regApplyPackage" parameterType="java.util.List">
		insert into
		MOVE_APPLY_OPTION_TBL (
		OPTION_IDX,
		APPLY_IDX,
		PACKAGE_IDX,
		PACKAGE_TYPE,
		PACKAGE_NAME,
		PACKAGE_OPTION,
		PACKAGE_IMG_PATH
		)
		select
		MOVE_APPLY_OPTION_SEQ.nextval,
		MOVE_APPLY_SEQ.currval,
		T.* from(
		<foreach collection="list" item="item" separator="UNION ALL ">
			select
			#{item.packageIdx} as PACKAGE_IDX,
			#{item.packageType} as PACKAGE_TYPE,
			#{item.packageName} as PACKAGE_NAME,
			#{item.packageOption} as PACKAGE_OPTION,
			#{item.packageImgPath} as PACKAGE_IMG_PATH
			from dual
		</foreach>
		) T
	</insert>

	<!-- 이미지 등록 -->
	<insert id="regApplyImg" parameterType="java.util.List">
		insert into
		MOVE_APPLY_IMG_TBL (
		IMG_IDX,
		APPLY_IDX,
		IMG_NAME,
		IMG_PATH
		)
		select
		MOVE_APPLY_IMG_SEQ.nextval,
		MOVE_APPLY_SEQ.currval,
		T.* from(
		<foreach collection="list" item="item" separator="UNION ALL">
			select
			#{item.imgName} as IMG_NAME,
			#{item.imgPath} as IMG_PATH
			from dual
		</foreach>
		) T
	</insert>



	<!-- 관리자 패키지 리스트 불러오기 -->
	<select id="getManagePackageList" resultMap="packageMap">
		select t2.*
		from (
		    select /*+index_desc(move_package_tbl PACKAGE_IDX) */
		           ROWNUM rnum , t1.*
		    from MOVE_PACKAGE_TBL t1
		    where
				PACKAGE_idx != 0
				<if test='!keyword.equals("")'>
					and PACKAGE_NAME LIKE '%'||#{keyword}||'%'
				</if>
				<if test="type1 != null">
					and PACKAGE_TYPE in
					<foreach collection="type1" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
				</if>
				<if test='!minDate.equals("")'>
					and PACKAGE_REG_DATE <![CDATA[>]]> To_date(#{minDate}, 'yyyy-mm-dd')
				</if>
				<if test='!maxDate.equals("")'>
					and PACKAGE_REG_DATE <![CDATA[<]]> To_date(#{maxDate}, 'yyyy-mm-dd')
				</if>
			and ROWNUM <![CDATA[<=]]> #{pageNum} * #{amount}
		    order by PACKAGE_IDX desc) t2
		where
		      PACKAGE_STATUS = 0
			 and rnum > (#{pageNum} -1) * #{amount}

	</select>


	<!-- 패키지 검색 총 개수 구하기 -->
	<select id="getTotal" resultType="int">
		select count(*) from MOVE_PACKAGE_TBL where PACKAGE_IDX > 0
		<if test='!keyword.equals("")'>
			and PACKAGE_NAME LIKE '%'||#{keyword}||'%'
		</if>
		<if test="type1 != null">
			and PACKAGE_TYPE in
			<foreach collection="type1" item="item" index="index" separator="," open="(" close=")">
				#{item}
			</foreach>
		</if>
		<if test='!minDate.equals("")'>
			and PACKAGE_REG_DATE <![CDATA[>]]> To_date(#{minDate}, 'yyyy-mm-dd')
		</if>
		<if test='!maxDate.equals("")'>
			and PACKAGE_REG_DATE <![CDATA[<]]> To_date(#{maxDate}, 'yyyy-mm-dd')
		</if>

	</select>


</mapper>