<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dassa.mapper.GuestMoveMapper">
  	<insert id="guestMovePayment" parameterType="com.dassa.vo.MovePaymentVO">
  		insert into move_payment_tbl values(
  			move_payment_seq.nextval,
  			#{applyIdx},
  			#{driverIdx},
  			#{movePaymentImpUid},
  			#{movePaymentMerchantUid},
  			#{movePaymentPayMethod},
  			#{movePaymentPg},
  			#{movePaymentPgNumber},
  			#{movePaymentCardName},
  			#{movePaymentAmount},
  			#{movePaymentDate},
  			null,
  			#{movePaymentStatus}
  			)
  	</insert>
  	<select id="moveList" parameterType="java.util.Map" resultType="com.dassa.vo.MoveApplyVO">
  			select a.* from
  				(select apply_idx as applyIdx,
  				apply_date as applyDate,
  				apply_time as applyTime,
  				apply_hope as applyHope,
  				apply_help as applyHelp,
  				start_addr1 as startAddr1,
  				start_addr2 as startAddr2,
  				start_addr3 as startAddr3,
  				end_addr1 as endAddr1,
  				end_addr2 as endAddr2,
  				end_addr3 as endAddr3,
  				apply_status as applyStatus,
  				ROW_NUMBER() OVER(ORDER BY apply_idx DESC) rNUM
  				from move_apply_tbl where guest_idx = #{guestIdx} ) a
  				where rNUM between #{start} and #{end}
  	</select>
  	<select id="moveApplyTotalCount" parameterType="_int" resultType="_int">
  		select count(*) as cnt from move_apply_tbl where guest_idx = #{guestIdx}
  	</select>
  	<select id="moveAuction" parameterType="_int" resultType="com.dassa.vo.MoveAuctionVO">
  		select d.driver_idx as driverIdx,
  			d.apply_idx as applyIdx,
  			d.estimateAmount as estimateAmount,
  			d.auction_state as auctionState,
  			u.user_name as userName,
  			u.pro_filepath as proFilepath
  			from driver_tbl d join user_tbl u on (d.driver_idx = u.user_idx) where apply_idx = #{applyIdx}
  	</select>
  	<select id="moveAuctionInfo" parameterType="_int" resultType="com.dassa.vo.MoveAuctionVO">
  		select d.driver_idx as driverIdx,
  			d.apply_idx as applyIdx,
  			d.user_car as userCar,
  			d.driver_message as driverMessage,
  			d.ladderstate as ladderState,
  			d.estimateAmount as estimateAmount,
  			d.auction_state as auctionState,
  			u.user_name as userName,
  			u.pro_filepath as proFilepath,
  			u.user_introduce as userIntroduce
  			from driver_tbl d join user_tbl u on (d.driver_idx = u.user_idx) where d.apply_idx = #{applyIdx}
  	</select>
  	<select id="driverReviewSelect" parameterType="_int" resultType="com.dassa.vo.MoveAuctionReview">
  		select avg(review_star) as reviewStarAVG ,count(*) as reviewCount from driver_review_tbl where driver_idx=#{driverIdx}
  	</select>
  	<update id="moveApplyStateUpdate" parameterType="_int">
  		update move_apply_tbl set apply_status = '2' where apply_idx=#{applyIdx}
  	</update>
  	<update id="moveDriverStateUpdate" parameterType="_int">
  		update driver_tbl set auction_state = 2 where apply_idx=#{applyIdx}
  	</update>
  	<select id="paymentInfo" parameterType="_int" resultType="com.dassa.vo.MovePaymentVO">
  		select move_payment_idx as movePaymentIdx,
  			move_payment_imp_uid as movePaymentImpUid,
  			apply_idx as applyIdx,
  			move_payment_method as movePaymentPayMethod,
  			move_payment_cardname as movePaymentCardName,
  			move_payment_pg_number as movePaymentPgNumber,
  			move_payment_amount as movePaymentAmount,
  			move_payment_date as movePaymentDate,
  			move_payment_cenceldate as movePaymentCencelDate,
  			move_payment_status as movePaymentStatus
  			from move_payment_tbl where apply_idx = #{applyIdx} 
  	</select>
  	<update id="guestMovePaymentCencel" parameterType="com.dassa.vo.MovePaymentVO">
  		update move_payment_tbl set move_payment_status = #{movePaymentStatus}, move_payment_cenceldate = sysdate where MOVE_PAYMENT_imp_uid = #{movePaymentImpUid}
  	</update>
  	<update id="guestMoveDriverCencel" parameterType="_int">
  		update driver_tbl set auction_state = 4 where apply_idx=#{applyIdx}
  	</update>
  	<update id="guestMoveApplyCencel" parameterType="_int">
  		update move_apply_tbl set apply_status = '0' where apply_idx=#{applyIdx}
  	</update>
  	<select id="driverReview" resultType="com.dassa.vo.MovePaymentVO" parameterType="_int">
		select	apply_idx as applyIdx,
				driver_idx as driverIdx
				from move_payment_tbl
				where apply_idx =#{applyIdx}
	</select>
	
	<select id="driverReviewWrite" resultType="com.dassa.vo.DriverVO" parameterType="com.dassa.vo.DriverVO">
		select driver_idx as driverIdx,
				apply_idx as applyIdx,
				estimateAmount
				from  driver_tbl 
				where apply_idx =#{applyIdx} and driver_idx =#{driverIdx} 
	</select>
	<insert id="driverReviewInsert" parameterType="com.dassa.vo.DriverReviewVO">
		insert into driver_review_tbl values (driver_review_idx_seq.nextval,#{driverIdx},#{applyIdx},#{reviewStar},#{reviewMessage},#{extraMoney},sysdate)
	</insert>

	<update id="moveApplyFinalCompletion" parameterType="_int">
		update move_apply_tbl set apply_status = '3' where apply_idx=#{applyIdx}
	</update>
	<update id="driverMoveFinalCompletion" parameterType="_int">
		update driver_tbl set auction_state = 3 where apply_idx=#{applyIdx}
	</update>
	<select id="driverReviewSelectOne" parameterType="_int" resultType="com.dassa.vo.DriverReviewVO">
		select review_idx as reviewIdx from driver_review_tbl where apply_idx=#{applyIdx}
	</select>
	<select id="applyIdxSelectList" parameterType="_int" resultType="com.dassa.vo.DriverMypageReviewVO">
	
	select r.review_idx as reviewIdx,
				r.driver_idx as driverIdx,
				r.apply_idx as applyIdx,
				r.review_star as reviewStar,
				r.review_Message as reviewMessage,
				r.extra_money as extraMoney,
				r.review_date as reviewDate 
				,d.estimateamount as estimateAmount
	from driver_review_tbl r join driver_tbl d on (r.driver_idx = d.driver_idx) 
	where r.apply_idx in (select apply_idx from move_apply_tbl where guest_idx=#{guestIdx})
	</select>
	
	
	<!-- 방문 리스트 개수 -->
	<select id="shopReservationTotalCount" resultType="_int" parameterType="_int">
		select count(*) cnt from shop_reservation_tbl where (shop_reservation_state='예약대기' or shop_reservation_state='예약완료') and user_idx = #{userIdx} 
	</select>
	<!-- 방문 리스트 뿌리기 -->
	<select id="selectReservationAllList" resultType="shopReservationVO" parameterType="map">
			select shop_reservation_idx as shopReservationIdx,
				shop_idx as shopIdx,
				shop_name as shopName,
				shop_item_idx as shopItemIdx,
				shop_item_title as shopItemTitle,
				shop_item_manager as shopItemManager,
				user_name as userName,
				user_tel as userTel,
				shop_reservation_state as shopReservationState,
				shop_reservation_date as shopReservationDate
			from (select rownum as rnum, item.* from (select * from shop_reservation_tbl where (shop_reservation_state='예약대기' or shop_reservation_state='예약완료' or shop_reservation_state='상담완료' or shop_reservation_state='예약취소') and user_idx=#{userIdx}
			order by rownum desc) item)
			where rnum between #{start} and #{end} 
	</select>
	<!-- 예약 진행 -->
	<update id="reservationhold" parameterType="shopReservationVO">
		update shop_reservation_tbl set shop_reservation_state='예약완료' where shop_reservation_idx=#{shopReservationIdx}
	</update>
	<!-- 예약 완료 -->
	<update id="reservationIng" parameterType="shopReservationVO">
		update shop_reservation_tbl set shop_reservation_state='상담완료' where shop_reservation_idx=#{shopReservationIdx}
	</update>
	<!-- 예약 삭제 -->
	<update id="reservationDel" parameterType="shopReservationVO">
		update shop_reservation_tbl set shop_reservation_state='예약취소' where shop_reservation_idx=#{shopReservationIdx}
	</update>
	
	<!-- 비밀번호 확인 -->
	<select id="getPwChkProc" resultType="userVO">
		select user_id as userId, user_name as userName, pro_filename as proFilename, pro_filepath as proFilepath from user_tbl where user_idx=#{userIdx} and user_pw=#{userPw}
	</select>
	<!-- 사용자 정보 수정 -->
	<update id="getModiUser" parameterType="userVO">
		update user_tbl set user_name=#{userName}, user_pw=#{userPw} where user_idx=#{userIdx}
	</update>
	<!-- img수정 -->
	<update id="getImgModiUser" parameterType="userVO">
		update user_tbl set pro_filename=#{proFilename}, pro_filepath=#{proFilepath} where user_idx=#{userIdx}
	</update>
	
	<!-- 마이페이지 문의내역리스트 -->
	 <select id="selectQuestionList" resultType="questionVO" parameterType="_int">
	select rnum as rnum,
	questions_index as questionsIndex,
	questions_user_type as questionsUserType,
	questions_title as questionsTitle,
	questions_answer as questionsAnswer,
	questions_answer_state as questionsAnswerState,
	questions_writer as questionsWriter,
	questions_reg_date as questionsRegDate,
	questions_state as questionsState
	from (select rownum as rn , r.* from (select * from (select rownum as rnum,
	n.* from
	(select * from questions_tbl where
	questions_user_type='일반문의' and  questions_state='정상'
	order by questions_reg_date) n) order by rnum desc)r)
	where rn between #{start} and #{end}	  
  </select>
  <!-- totalcount -->
  <select id="totalCount" resultType="_int">
  	select count(*) cnt from questions_tbl where questions_user_type='일반문의'
  </select>
    <!-- 1:1문의 뷰페이지 -->
  <select id="questionView" parameterType="questionVO" resultType="questionVO">
  	select questions_index as questionsIndex,
  			questions_title as questionsTitle,
  			questions_writer as questionsWriter,
  			questions_content as questionsContent,
  			questions_answer as questionsAnswer
  			from questions_tbl
  			where questions_index=#{questionsIndex}
  </select>
  
     <!-- 1:1 문의 삭제 -->
   <update id="myQuestionDelete" parameterType="questionVO">
  	update questions_tbl set questions_state='삭제' where questions_index=#{questionsIndex}
  </update> 
</mapper>
